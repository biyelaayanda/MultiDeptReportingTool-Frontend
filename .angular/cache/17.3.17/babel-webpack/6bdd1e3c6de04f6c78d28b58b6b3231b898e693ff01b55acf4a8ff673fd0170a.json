{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AnalyticsService = /*#__PURE__*/(() => {\n  class AnalyticsService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = `${environment.apiUrl}/api/analytics`;\n    }\n    // Executive Dashboard\n    getExecutiveDashboard(startDate, endDate) {\n      let params = new HttpParams();\n      if (startDate) {\n        params = params.set('startDate', startDate.toISOString());\n      }\n      if (endDate) {\n        params = params.set('endDate', endDate.toISOString());\n      }\n      return this.http.get(`${this.apiUrl}/dashboard`, {\n        params\n      });\n    }\n    // Business Intelligence\n    getBusinessIntelligence(timeframe) {\n      let params = new HttpParams();\n      if (timeframe) {\n        params = params.set('timeframe', timeframe);\n      }\n      return this.http.get(`${this.apiUrl}/business-intelligence`, {\n        params\n      });\n    }\n    // KPI Metrics\n    getKpiMetrics() {\n      return this.http.get(`${this.apiUrl}/kpi-metrics`);\n    }\n    getKpiMetric(metricName) {\n      return this.http.get(`${this.apiUrl}/kpi-metrics/${metricName}`);\n    }\n    // Department Performance\n    getDepartmentPerformance() {\n      return this.http.get(`${this.apiUrl}/department-performance`);\n    }\n    getDepartmentPerformanceById(departmentId) {\n      return this.http.get(`${this.apiUrl}/department-performance/${departmentId}`);\n    }\n    // Trends and Analytics\n    getTrendAnalysis(metric, timeframe) {\n      let params = new HttpParams();\n      if (timeframe) {\n        params = params.set('timeframe', timeframe);\n      }\n      return this.http.get(`${this.apiUrl}/trends/${metric}`, {\n        params\n      });\n    }\n    getReportingTrends(timeframe) {\n      let params = new HttpParams();\n      if (timeframe) {\n        params = params.set('timeframe', timeframe);\n      }\n      return this.http.get(`${this.apiUrl}/reporting-trends`, {\n        params\n      });\n    }\n    getCompletionTrends(timeframe) {\n      let params = new HttpParams();\n      if (timeframe) {\n        params = params.set('timeframe', timeframe);\n      }\n      return this.http.get(`${this.apiUrl}/completion-trends`, {\n        params\n      });\n    }\n    // Alerts and Notifications\n    getAlerts() {\n      return this.http.get(`${this.apiUrl}/alerts`);\n    }\n    getCriticalAlerts() {\n      return this.http.get(`${this.apiUrl}/alerts/critical`);\n    }\n    markAlertAsRead(alertId) {\n      return this.http.put(`${this.apiUrl}/alerts/${alertId}/read`, {});\n    }\n    // User Performance\n    getUserPerformance() {\n      return this.http.get(`${this.apiUrl}/user-performance`);\n    }\n    getTopPerformers(limit) {\n      let params = new HttpParams();\n      if (limit) {\n        params = params.set('limit', limit.toString());\n      }\n      return this.http.get(`${this.apiUrl}/top-performers`, {\n        params\n      });\n    }\n    // System Health\n    getSystemHealth() {\n      return this.http.get(`${this.apiUrl}/system-health`);\n    }\n    // Predictive Analytics\n    getPredictiveAnalytics(metric, timeframe) {\n      let params = new HttpParams();\n      if (timeframe) {\n        params = params.set('timeframe', timeframe);\n      }\n      return this.http.get(`${this.apiUrl}/predictions/${metric}`, {\n        params\n      });\n    }\n    // Advanced Analytics\n    getReportingPatterns() {\n      return this.http.get(`${this.apiUrl}/reporting-patterns`);\n    }\n    getDepartmentComparison() {\n      return this.http.get(`${this.apiUrl}/department-comparison`);\n    }\n    getEfficiencyMetrics() {\n      return this.http.get(`${this.apiUrl}/efficiency-metrics`);\n    }\n    getCustomAnalytics(query) {\n      return this.http.post(`${this.apiUrl}/custom-analytics`, query);\n    }\n    // Real-time Data\n    getRealTimeMetrics() {\n      return this.http.get(`${this.apiUrl}/real-time-metrics`);\n    }\n    // Export Analytics Data\n    exportAnalyticsData(format, options) {\n      let params = new HttpParams();\n      if (options) {\n        Object.keys(options).forEach(key => {\n          params = params.set(key, options[key]);\n        });\n      }\n      return this.http.get(`${this.apiUrl}/export/${format}`, {\n        params,\n        responseType: 'blob'\n      });\n    }\n    // Refresh Analytics Cache\n    refreshAnalyticsCache() {\n      return this.http.post(`${this.apiUrl}/refresh-cache`, {});\n    }\n    // Historical Data\n    getHistoricalData(metric, startDate, endDate) {\n      const params = new HttpParams().set('metric', metric).set('startDate', startDate.toISOString()).set('endDate', endDate.toISOString());\n      return this.http.get(`${this.apiUrl}/historical-data`, {\n        params\n      });\n    }\n    static {\n      this.ɵfac = function AnalyticsService_Factory(t) {\n        return new (t || AnalyticsService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AnalyticsService,\n        factory: AnalyticsService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AnalyticsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}