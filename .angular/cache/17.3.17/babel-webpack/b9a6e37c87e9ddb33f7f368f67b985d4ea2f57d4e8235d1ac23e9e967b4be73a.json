{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = 'http://localhost:5111/api'; // Changed to HTTP\n      this.TOKEN_KEY = 'jwt_token';\n      this.USER_KEY = 'current_user';\n      this.currentUserSubject = new BehaviorSubject(this.getCurrentUser());\n      this.currentUser$ = this.currentUserSubject.asObservable();\n    }\n    login(loginRequest) {\n      // Create clean login request without role field for API\n      const apiRequest = {\n        username: loginRequest.username,\n        password: loginRequest.password\n      };\n      return this.http.post(`${this.API_URL}/auth/login`, apiRequest).pipe(tap(response => {\n        if (response && response.token) {\n          localStorage.setItem(this.TOKEN_KEY, response.token);\n          const user = {\n            username: response.username,\n            email: response.email,\n            role: response.role\n          };\n          localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n          this.currentUserSubject.next(user);\n        }\n      }));\n    }\n    register(registerRequest) {\n      return this.http.post(`${this.API_URL}/auth/register`, registerRequest);\n    }\n    logout() {\n      localStorage.removeItem(this.TOKEN_KEY);\n      localStorage.removeItem(this.USER_KEY);\n      this.currentUserSubject.next(null);\n    }\n    getToken() {\n      return localStorage.getItem(this.TOKEN_KEY);\n    }\n    isAuthenticated() {\n      const token = this.getToken();\n      if (!token) {\n        return false;\n      }\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        const exp = payload.exp * 1000;\n        return Date.now() < exp;\n      } catch {\n        return false;\n      }\n    }\n    getCurrentUser() {\n      const userStr = localStorage.getItem(this.USER_KEY);\n      if (userStr) {\n        try {\n          return JSON.parse(userStr);\n        } catch {\n          return null;\n        }\n      }\n      return null;\n    }\n    getUserRole() {\n      const user = this.getCurrentUser();\n      return user ? user.role : null;\n    }\n    hasRole(role) {\n      const userRole = this.getUserRole();\n      return userRole === role;\n    }\n    getDefaultRouteForRole() {\n      const role = this.getUserRole();\n      switch (role) {\n        case 'Executive':\n          return '/executive';\n        case 'Admin':\n          return '/dashboard';\n        case 'DepartmentLead':\n          return '/department-lead';\n        case 'Staff':\n          return '/staff-user';\n        default:\n          return '/reporting';\n      }\n    }\n    getProfile() {\n      return this.http.get(`${this.API_URL}/auth/profile`);\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}