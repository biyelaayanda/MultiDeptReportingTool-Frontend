{"ast":null,"code":"import { Chart, registerables } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"chartCanvas\"];\nChart.register(...registerables);\nexport let ChartComponent = /*#__PURE__*/(() => {\n  class ChartComponent {\n    constructor() {\n      this.chart = null;\n    }\n    ngAfterViewInit() {\n      if (this.chartConfig) {\n        this.createChart();\n      }\n    }\n    ngOnDestroy() {\n      if (this.chart) {\n        this.chart.destroy();\n      }\n    }\n    createChart() {\n      if (this.chart) {\n        this.chart.destroy();\n      }\n      const ctx = this.chartCanvas.nativeElement.getContext('2d');\n      if (ctx) {\n        this.chart = new Chart(ctx, this.chartConfig);\n      }\n    }\n    updateChart(newConfig) {\n      this.chartConfig = newConfig;\n      this.createChart();\n    }\n    static {\n      this.ɵfac = function ChartComponent_Factory(t) {\n        return new (t || ChartComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ChartComponent,\n        selectors: [[\"app-chart\"]],\n        viewQuery: function ChartComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartCanvas = _t.first);\n          }\n        },\n        inputs: {\n          chartConfig: \"chartConfig\"\n        },\n        decls: 2,\n        vars: 0,\n        consts: [[\"chartCanvas\", \"\"]],\n        template: function ChartComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelement(0, \"canvas\", null, 0);\n          }\n        },\n        styles: [\"canvas[_ngcontent-%COMP%]{width:100%!important;height:100%!important}\"]\n      });\n    }\n  }\n  return ChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}